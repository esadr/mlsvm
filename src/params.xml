<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<Config_Params >
  <main_function intVal="0"/>                 <!-- -d main functinality
												 0: Classification
							                     1: Regression (has not developed) -->
  

  <mlsvm_version stringVal="1.1.3"/> 
  <!-- ****************** Main ********************-->
  <cpp_srand_seed stringVal= ""/>	 	    <!--for real runs should be empty string ""-->
  
  <main_num_repeat_exp intVal = "1"/>; 		<!--set the number of repeats in the Main file over the whole cross-validation -->
  <main_num_kf_iter intVal = "5"/>; 		<!--set the number of cross-validation in the Main file-->
  <exp_info stringVal="unique_string"/>
  <multi_level_status boolVal = "0"/>	    <!-- only for personalized training -->
  <!-- ****************** NN ********************-->
  <nn_number_of_classes intVal="2"/>
  <nn_number_of_neighbors intVal="10"/>
  <nn_distance_type intVal="1"/>		
  <!-- ****************** Loader ********************-->
  <ds_path stringVal="./datasets/"/>
  <ds_name stringVal="twonorm"/>		 
  <tmp_path stringVal="./temp/"/>	<!--temp folder path for k_fold files-->
  <model_path stringVal="./svm_models/"/>
  <pre_init_loader_matrix intVal = "300"/>; 	<!--In Loader, for initaliation of the matrix (not less than the number of features)-->
  <inverse_weight boolVal= "1"/>		<!-- 0: means the distance is related to strenght of the connection.
						                     1: means the inverse is needed, like Euclidean distnace (July 20,2015)-->
  <ld_weight_type intVal="1"/>			<!-- 1: Flann(square of Euclidean distance), 2: Gaussian distance-->
  <ld_weight_param doubleVal="0.005"/>
  <!-- ****************** Coarsening ********************-->
  <coarse_Eta doubleVal= "2"/>
  <coarse_threshold intVal= "300"/> 		<!-- Number of data points in each class (usual 300,500)-->
  <coarse_q doubleVal= "0.4"/> 
  <coarse_r intVal= "4"/>    			<!-- Max number of aggregates each fine point could participate to them-->
  <cs_max_coarse_level intVal = "30"/>		<!-- Limit the number of levels in the coarsening (stop infinit loops)-->
  <cs_use_real_points intVal= "0"/>		<!-- Default 0: calculate the fake points, 1: use real point for coarser levels -->
  <cs_weak_edges_ft doubleVal= "0.001"/>		<!-- Filter threshold for the weak edges-->
  <cs_boundary_points_status boolVal = "0"/>	<!--max number of fractions added to a row of P matrix for a fine point in case of considering the boundary points-->
  <cs_boundary_points_threshold doubleVal= "0.5"/> 	<!--the minimum entropy for a fine point to be considered as boundary point between 0 and 1-->
  <cs_boundary_points_max_num intVal = "30"/>	<!-- 0: no boundary point, 1: added max number of fraction for boundary poitns-->
  
  <!-- ****************** Model selection ********************-->
  <ms_status intVal= "1"/>
  <ms_limit intVal= "10000"/>          		<!-- stop model selection, inherit the last C, gamma-->
						<!-- min size of ms_limit should be larger than double of coarse coarse_threshold-->
  <ms_svm_id intVal= "2"/>              	<!-- 1: Regular SVM, 2: Weighted SVM -->
  <ms_first_stage intVal= "9"/>			<!-- number of iterations in the first stage of Uniform design (default 9) -->
  <ms_second_stage intVal= "5"/>		<!-- number of iterations in the first stage of Uniform design (default 5) -->
  <!--this is the percentage of training data as an input to the model selection for each class. e.g 0.1 means 10% for validation and 90% for training-->	
  <!--<ms_validation_part doubleVal= "0.10"/>		<!--default is 0.1 -->  -->
  <ms_VD_sample_size_fraction doubleVal="0.1"/> 	<!--the fraction of whole training data used for validation-->  
  <ms_print_untouch_reuslts intVal = "1"/>
  <!--Thershold for comapring the Gmeans in model selection, select best parameters-->
  <ms_bs_gm_threshold doubleVal = "0.00001"/>		<!--default for not rel should be 0.00001-->
  <ms_best_selection intVal = "1"/>		<!-- method to select the best parameters 0, 
						     1: best gmean & least nSV, 2: only best gmean -->
  <!-- ****************** SVM Parameters ********************-->
  <svm_svm_type intVal = "0"/>			<!-- -s svm_type : set type of SVM (default 0)
						0: C-SVC		(multi-class classification)
						1: nu-SVC		(multi-class classification)
						2: one-class SVM
						3: epsilon-SVR	(regression)
						4: nu-SVR		(regression)-->
  
  <svm_kernel_type intVal= "2"/>		<!-- -t kernel_type : set type of kernel function (default 2)
						0: linear: u'*v
						1: polynomial: (gamma*u'*v + coef0)^degree
						2: radial basis function: exp(-gamma*|u-v|^2)
						3: sigmoid: tanh(gamma*u'*v + coef0)
						4: precomputed kernel (kernel values in training_set_file)-->
  <svm_degree intVal  = "3"/>			<!--for poly-->
  <svm_gamma doubleVal  = "0.5"/>	 	<!--for poly/rbf/sigmoid--><!--1/num_features-->
  <svm_coef0 doubleVal  = "0"/>			<!--for poly/sigmoid-->
  <svm_nu doubleVal  = "0.5"/>			<!--for NU_SVC, ONE_CLASS, and NU_SVR-->
  <svm_cache_size doubleVal  = "40000"/>		<!--in MB-->			
  <svm_C doubleVal  = "100"/>			<!--for C_SVC, EPSILON_SVR and NU_SVR-->
  <svm_eps doubleVal  = "0.001"/>		<!--stopping criteria--> <!--libsvm default: 1e-3  Talayeh code: 0.1-->
  <svm_p doubleVal  = "0.1"/>			<!--for EPSILON_SVR-->
  <svm_shrinking intVal  = "1"/>		<!--default is 1-->
  <svm_probability intVal  = "0"/>             	<!--do probability estimates-->
  <svm_nr_weight intVal  = "2"/>		<!--for C_SVC-->
  <!-- ****************** Refinement ********************-->
  <rf_add_fraction floatVal = "1"/>
  <rf_sel_all_min_limit intVal = "500"/>
  <rf_add_distant_point_status boolVal = "0"/>		<!-- Add SV to finer levels  0: Disable, 1: Enable-->
  <rf_weight_vol intVal = "1"/>			<!-- How to Calculate the weights 
						0: Number of points in each class
						1: Sum of volumes of points in each class -->
  <pr_start_partitioning intVal= "5000"/> 		<!--start to partition data to smaller parts-->
  <!-- ****************** Partitioning ********************-->
  <pr_partition_max_size intVal= "1000"/> 		<!--Maximum number of points in each partition(partition) for partitioning classes-->
  <pr_maj_voting_id intVal= "2"/> 		<!-- Majority Voting technique
						1: all votes are the same 
						2: weighted by inverse Euclidean distance 
						3: weighted by inverse (Euclidean distance)^2
						4: weighted by inverse Manhatan distance -->
</Config_Params>
